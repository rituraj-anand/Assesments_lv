# -*- coding: utf-8 -*-
"""LVADSUSR181-IA2-Clsf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_iV6SsYctEvMYmWvHqDV8B4PvMapTI0
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/winequality-red.csv")
columns = df.columns.tolist()

df.info()

df.head(5)

#Number of missing values
df.isna().sum()

df.shape

#1
#Handle missing values
print(df.isna().sum())
data = df.fillna(df.mean())
data.shape

row = df.duplicated()
row

data.isna().sum()

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)
df1 = data[~outliers]

#2-----------Data Transformation-------------
def map_quality(quality):
    if quality >= 3 and quality <= 6:
        return 0
    elif quality >= 7 and quality <= 8:
        return 1
    else:
        return None
df1['quality'] = df1['quality'].apply(map_quality)

quality_distribution = df1['quality'].value_counts()
print("Wine quality distribution:")
print(quality_distribution)

plt.figure(figsize=(8, 6))
quality_distribution.plot(kind='bar', color='Maroon')
plt.title('Wine Quality Distribution')
plt.xlabel('Quality')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

#3
objects = list(df1.select_dtypes(include=['object']).columns)
objects
print("there are no categorical columns in the dataset")

#4
from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)

#5
X = df1.drop(columns=['quality'])
y = df1['quality']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

selected_features = X.columns
selected_features

#6
from sklearn.metrics import classification_report
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_resampled, y_train_resampled)
y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", round(accuracy*100,2),"%")
prec = precision_score(y_test, y_pred)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, y_pred)
print("Recall:", round(recall*100,2),"%")
clf_report = classification_report(y_test, y_pred)
print(clf_report)