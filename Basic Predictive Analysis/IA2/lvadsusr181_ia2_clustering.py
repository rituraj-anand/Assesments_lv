# -*- coding: utf-8 -*-
"""LVADSUSR181-IA2-Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V77F6No3-UaEMPZ9zqmynv4tN80aXIti
"""

import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings("ignore")

#1
# Data exploration and preprocessing
df=pd.read_csv("/content/Mall_Customers.csv")
df.head(5)

df.shape

df.rename(columns={'Annual Income (k$)': 'AnnualIncome'}, inplace=True)
df.rename(columns={'Spending Score (1-100)': 'SpendingScore'}, inplace=True)
df

df.dtypes

df.describe()

#Checking for missing values in the dataset
df.isnull().sum()

df['AnnualIncome'].fillna(df['AnnualIncome'].mean(), inplace=True)

#feature engineering
df['AnnualIncome'].fillna(df['AnnualIncome'].mean(), inplace=True)
df['Income-spending-Ratio'] = df['AnnualIncome']/df['SpendingScore']
# df.drop(columns=['RatioofIncome/spending'], inplace=True,axis='columns')
df

#checking if any missing values
df.isnull().sum()

df.duplicated().sum()

#Checking outliers
plt.figure(figsize=(10,6))
sns.boxplot(data=df)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])

q1  =df.quantile(0.25)
q3  =df.quantile(0.75)
iqr  = q3-q1
outlier  = ((df<(q1-iqr*1.5)) | (df>(q3+iqr*1.5))).any(axis=1)
df = df[~outlier]
df

#2
#Elbow Method for Finding the optimal number of clusters
from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
scaled_features = scaler.fit_transform(df.iloc[:, 2:])
selected_features = scaled_features

"""
optimal number of clusters using techniques like the elbow method and then apply k-mean clustering algorithm"""

from sklearn.cluster import KMeans
w_list = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(selected_features)
    w_list.append(kmeans.inertia_)

# Plot the elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), w_list, marker='o', linestyle='--',c="red")
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.show()

plt.figure(figsize=(10,5))
sns.scatterplot(data=df,x="AnnualIncome",y="SpendingScore",hue="Gender")
plt.show()

""" Apply K-means clustering"""

#3
from sklearn.cluster import KMeans

num_clusters = 5
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df['cluster'] = kmeans.fit_predict(selected_features)

kmeans.labels_

#4
#Scatterplot of the clusters
plt.figure(figsize=(10,6))
sns.scatterplot(x = 'AnnualIncome',y = 'SpendingScore',hue="cluster",
                 palette=['green','orange','brown','dodgerblue','red'], legend='full',data = df  ,s = 60 )
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Spending Score (1-100) vs Annual Income (k$)')
plt.show()

#5
plt.figure(figsize=(10, 6))
colors = ['purple', 'red', 'blue', 'green', 'yellow']
for i in range(5):
    plt.scatter(df["Age"][df.cluster == i], df["AnnualIncome"][df.cluster == i], c=colors[i], label=f'Cluster {i+1}', s=60)
plt.xlabel("Age")
plt.ylabel("AnnualIncome")
plt.title('Customer Segmentation')
plt.legend()
plt.show()

print("Targerted Strategise")
print("On seeing the cluster it is clear that one who earns more spends more ,therefore target the people who earns more")

# sns.boxplot(data=df, x="AnnualIncome", y="SpendingScore")
print("Targerted Strategise")
print("On seeing the cluster it is clear that one who earns more spends more ,therefore target the people who earns more")