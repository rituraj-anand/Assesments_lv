# -*- coding: utf-8 -*-
"""LVADSUSR181-rituraj-anand-Py-IA1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1croCTDf__UEBrrQbiBGviSO_KZtY0kkA
"""

#1
def properties():
  length = float(input("Input length of the plot: "))
  width = float(input("Input width of the plot: "))

  area = length* width
  print(f"Area of the plot is {area}")

  if(area<1000):
    print("this area is suitable for studio apartments")
  elif(area>1000 and area<5000):
    print("this area is suitable for office space ")
  elif(area>5000):
    print("this area is suitable for malls")
  else:
    print("Invalid Input")

properties()

#2

def calculate_bmi(weight, height):
  bmi = weight / (height ** 2)*10000
  return bmi

def healthMonitor():
  weight = float(input("Enter your weight in kilograms: "))
  height = float(input("Enter your height in meters: "))
  bmi = calculate_bmi(weight, height)

  print(f"Your BMI is: {bmi}")

#  " "If your BMI is less than 18.5, it falls within the underweight range. If your BMI is 18.5 to 24.9, "
#  " it falls within the Healthy Weight range. If your BMI is 25.0 to 29.9, "
#   "it falls within the overweight range. "
#   "If your BMI is 30.0 or higher, it falls within the obese range."

  if (bmi<=18.5):
    print("Underweight! Kindly follow the bulking diets provided by your nutritionist! ")
  elif (bmi>18.5 and bmi<=24.9 ):
    print("Good! Your BMI is in healthy range, keep following the same diets and exercises! ")
  elif(bmi in range(25.0, 29,.9)):
    print("Overweight! , kindly follow the cutting diets provided by your nutritionist! ")
  else:
    print("This BMI is in obese range,follow the diets provided by your nutritionist strictly! ")



healthMonitor()

#3
def student_grades():
    students = {}
    no_of_students = int(input("Enter number of students: "))

    for i in range(no_of_students):
        student_name = input("Enter student's name: ")
        subjects = {}
        no_of_subjects = int(input("Enter number of subjects: "))

        for j in range(no_of_subjects):
            subject_name = input("Enter subject name: ")
            grade = input("Enter grade: ")

            subjects[subject_name] = {"Grade": grade}

        students[student_name] = subjects

    return students

print(student_grades())

def shows_recommender():
    movies = {
        "young": ["Tom and Jerry", "Oswald", "Jurrasic Park"],
        "Teen": ["Stranger Things", "American Hoax", "Avengers"],
        "Adults": ["Sacred Games", "Breaking Bad", "Better Call Saul"],
        "Grands": ["Award shows", "Standups"]
    }
    age = int(input("Please enter your age: "))

    if age in range(5, 17):
        print("Here are some recommendations for you:", movies["young"])
    elif age in range(17, 20):
        print("Here are some recommendations for you:", movies["Teen"])
    elif age >= 20 and age <= 35:
        print("Here are some recommendations for you:", movies["Adults"])
    elif age > 35:
        print("Here are some recommendations for you:", movies["Grands"])

shows_recommender()

#5
def promotions():
  ls=[]
  subscribers = {
    1: "subscriber1@example.com",
    2: "subscriber2@example.com",
    3: "subscriber3@example.com",
    4: "subscriber4@example.com"
    }

  for subs_id in (subscribers):
    if(subs_id%2==0):
      ls.append(subscribers[subs_id])

  return ls


promotions()

def login(accounts):
    username = input("Enter username: ")
    password = input("Enter password: ")

    if username in accounts and decrypt(accounts[username], 10) == password:
        print("Login Successful! You now have access to finances!")
    else:
        print("Invalid credentials! If not signed up, register now.")

def access_control():
    accounts = {}  # Dictionary to store username-password pairs

    while True:
        print("\n1. Login\n2. Register\n3. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            login(accounts)
        elif choice == '2':
            registration(accounts)
        elif choice == '3':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please choose again.")

def registration(accounts):
    username = input("Enter username: ")
    if username in accounts:
        print("Username already exists. Please choose a different one.")
        return

def encrypt(text, key):
    encrypted_text = ""
    for char in text:
        encrypted_char = chr(ord(char) ^ key)
        encrypted_text += encrypted_char
    return encrypted_text

def decrypt(encrypted_text, key):
    decrypted_text = ""
    for char in encrypted_text:
        decrypted_char = chr(ord(char) ^ key)
        decrypted_text += decrypted_char
    return decrypted_text

access_control()

#7
def analyze_customer_satisfaction(feedback_data):

    scores = {
        "Overall Satisfaction": sum(feedback["Overall Satisfaction"] for feedback in feedback_data) / len(feedback_data),
        "Friendliness of Staff": sum(feedback["Friendliness of Staff"] for feedback in feedback_data) / len(feedback_data),
        "Quality of Service": sum(feedback["Quality of Service"] for feedback in feedback_data) / len(feedback_data),
        "Response Time": sum(feedback["Response Time"] for feedback in feedback_data) / len(feedback_data),
    }


    insights = []
    for aspect, score in scores.items():
        if score >= 4.5:
            insights.append(f"The {aspect} is performing exceptionally well.")
        elif 4.0 <= score < 4.5:
            insights.append(f"The {aspect} is performing satisfactorily, but there is room for improvement.")
        else:
            insights.append(f"The {aspect} needs immediate attention to improve customer satisfaction.")

    feedback_to_management = "\n".join(insights)
    return feedback_to_management


feedback_data = [
    {"Overall Satisfaction": 4.6, "Friendliness of Staff": 4.8, "Quality of Service": 4.5, "Response Time": 4.7},
    {"Overall Satisfaction": 3.9, "Friendliness of Staff": 4.2, "Quality of Service": 3.8, "Response Time": 4.1},

]

feedback_to_management = analyze_customer_satisfaction(feedback_data)
print(feedback_to_management)

#8
def count_vowels(comment, threshold=0.2):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in comment if char in vowels)
    total_characters = len(comment)


    vowel_ratio = vowel_count / total_characters if total_characters > 0 else 0


    is_low_effort = vowel_ratio < threshold

    return is_low_effort


comment1 = "This is a great post!"
comment2 = "Hmm..."
comment3 = "I looove this!"
comment4 = "Good job!"

print(count_vowels(comment1))  # False (not low-effort)
print(count_vowels(comment2))  # True (low-effort)
print(count_vowels(comment3))  # False (not low-effort)
print(count_vowels(comment4))  # True (low-effort)



#10
import datetime
import time

def set_reminder(event_datetime, customization_options):
    time_difference = event_datetime - datetime.datetime.now()

    reminder_intervals = customization_options.get("reminder_intervals", [])
    reminder_methods = customization_options.get("reminder_methods", [])

    for interval in reminder_intervals:
        reminder_time = event_datetime - datetime.timedelta(**interval)
        if reminder_time > datetime.datetime.now():

            notify_user(reminder_time, reminder_methods)

def notify_user(reminder_time, reminder_methods):

    print(f"Reminder: Upcoming event on {reminder_time}")
    for method in reminder_methods:
        if method == "push_notification":
            print("Push notification sent.")
        elif method == "email":
            print("Email sent.")
        elif method == "sms":
            print("SMS sent.")



event_datetime = datetime.datetime(2024, 5, 1, 10, 0)  # Example event datetime
customization_options = {
    "reminder_intervals": [{"days": 1}, {"hours": 6}],  # Remind 1 day and 6 hours before the event
    "reminder_methods": ["push_notification", "email"]  # Send reminders via push notification and email
}

set_reminder(event_datetime, customization_options)

#11
def calculate_loan_repayment(principal, interest_rate, num_payments):
    try:
        monthly_interest_rate = interest_rate / 100 / 12
        loan_repayment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -num_payments)
        return loan_repayment
    except ZeroDivisionError:
        raise ValueError("Number of payments should be greater than 0.")

def calculate_savings_interest(principal, interest_rate, num_years):
    try:
        interest_earned = principal * (interest_rate / 100) * num_years
        total_amount = principal + interest_earned
        return total_amount
    except ValueError:
        raise ValueError("Invalid input. Please check your principal amount, interest rate, and number of years.")


try:
    principal_loan = float(input("Enter the principal amount of the loan: "))
    interest_rate_loan = float(input("Enter the annual interest rate of the loan (%): "))
    num_payments_loan = int(input("Enter the number of payments for the loan: "))

    loan_repayment = calculate_loan_repayment(principal_loan, interest_rate_loan, num_payments_loan)
    print(f"Monthly loan repayment: ${loan_repayment:.2f}")

    principal_savings = float(input("Enter the principal amount for savings: "))
    interest_rate_savings = float(input("Enter the annual interest rate for savings (%): "))
    num_years_savings = int(input("Enter the number of years for savings: "))

    total_amount_savings = calculate_savings_interest(principal_savings, interest_rate_savings, num_years_savings)
    print(f"Total amount after {num_years_savings} years of savings: ${total_amount_savings:.2f}")

except ValueError as e:
    print(f"Error: {e}")
except Exception as e:
    print(f"Error: An unexpected error occurred - {e}")

#12
def addition(a, b):
    return a + b

def subtraction(a, b):
    return a - b

def multiplication(a, b):
    return a * b

def division(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        raise ValueError("Number should not be 0.")

def calculator():
    try:
        print("Welcome to the Calculator App!")
        print("1. Addition")
        print("2. Subtraction")
        print("3. Multiplication")
        print("4. Division")
        choice = input("Enter your choice (1/2/3/4): ")

        if choice not in ['1', '2', '3', '4']:
            print("Invalid choice")
            return

        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))

        if choice == '1':
            print("Result:", addition(num1, num2))
        elif choice == '2':
            print("Result:", subtraction(num1, num2))
        elif choice == '3':
            print("Result:", multiplication(num1, num2))
        elif choice == '4':
            print("Result:", division(num1, num2))
    except ValueError as e:
        print(f"Error: {e}")

calculator()

# Open the file
tech_logs = open('/content/tech_logs.txt', 'w')

lst = []

while True:
    print("Data to be written to file: ")
    text = input()  # Take input
    lst.append(text)  # Append to the list
    if text == "Done":
        break


tech_logs.write("\n".join(lst))

tech_logs.close()

#14

log_file = open('/content/tech_logs', 'r')
print(log_file.read())
log_file.close()

if(log_file):
  print("Logs reviewed successfully! ")

#15
def append_daily_news_updates(updates):
    try:
        with open('daily_news_briefing.txt', 'a') as file:
            file.write("\n" + updates)
            print("Updates appended successfully.")
    except Exception as e:
        print(f"Error appending updates: {e}")

def read_daily_news_briefing():
    try:
        with open('daily_news_briefing.txt', 'r') as file:
            content = file.read()
            print("Daily News Briefing:")
            print(content)
    except FileNotFoundError:
        print("Daily news briefing file not found.")
    except Exception as e:
        print(f"Error reading daily news briefing: {e}")


updates = """
Company News:
- Company X announced a new product launch.
- Company Y reported strong quarterly earnings.

Stock Performance:
- Stock of Company X increased by 2%.
- Stock of Company Y decreased by 1.5%.

Industry News:
- Industry analysts predict growth in the tech sector.
- Regulatory changes expected in the finance industry.
"""

append_daily_news_updates(updates)
read_daily_news_briefing()