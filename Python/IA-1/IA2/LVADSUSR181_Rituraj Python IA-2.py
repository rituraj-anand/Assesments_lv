# -*- coding: utf-8 -*-
"""IA-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kiPnmKgia9zBMitezHeARznxCKNkh8wy
"""

#1
import numpy as np

arr1= np.array([10, 12, 14, 16, 18])

min_val = np.min(arr1)
max_val = np.max(arr1)
sum_val = np.sum(arr1)
mean_val = np.mean(arr1)
std_val = np.std(arr1)

print(min_val,max_val,sum_val,mean_val,std_val)

#2
health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                      [165, 65, 35],   # height, weight, age for individual 2
                      [170, 75, 40]])  # height, weight, age for individual 3

normed = (health_data - health_data.mean(axis=0)) / health_data.std(axis=0)

print(normed.mean(axis=0))
print(normed.std(axis=0))

#3


def calculate_average_last_three_subjects(scores):
    # Slice the array to include only the last three subjects for each student
    last_three_subjects_scores = scores[:, -3:]

    # Filter out the scores marked as 'exempt' (-1)
    valid_scores = np.ma.masked_equal(last_three_subjects_scores, -1)

    # Compute the average for each student
    average_scores = valid_scores.mean(axis=1)

    return average_scores

# Example usage:
# Assuming scores is a 2D NumPy array where each row represents a student's scores in various subjects
scores = np.array([[80, 90, 85, -1, 92],
                   [70, 75, -1, 85, 88],
                   [88, 82, 90, 92, 95]])

average_last_three_subjects = calculate_average_last_three_subjects(scores)
print("Average score in the last three subjects for each student:")
print(average_last_three_subjects)

#4
sensor_data = np.linspace(15,25,24)
print(sensor_data)

#5 NA
import numpy as np
import pandas as pd

df = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5


n_s = pd.Series(df)

windows = n_s.rolling(window_size)
#moving average

moving_avg = windows.mean()

moving_avg_list  = moving_avg.to_list()

final_list = moving_avg_list[window_size-1:]

print(final_list)

()#6


# Define mean vector and covariance matrix
mean = [0, 0]
cov_matrix = [[1, 0.5], [0.5, 2]]

# Generate samples
samples = np.random.multivariate_normal(mean, cov_matrix, 100)

# Display the first few samples
print(samples[:5])

#7
import numpy as np

properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 89, 9]])

determinant = np.linalg.det(properties_matrix)
print("Determinant:", determinant)

#8
import numpy as np

# Create a 3x3 array
arr = np.array([[1, 6, 2],
                [7, 3, 8],
                [4, 9, 5]])

# Boolean indexing to filter out numbers greater than 5
filtered_arr = arr[arr > 5]

print("Original array:")
print(arr)

print("\nFiltered array (numbers greater than 5):")
print(filtered_arr)

#7
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

# Convert data to a pandas DataFrame for easier manipulation
import pandas as pd
df = pd.DataFrame(data)

# Filter employees under 45 who are not in the HR department
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]

# Extract names and cities of the filtered employees
employees_list = filtered_df[['Name', 'City']].values.tolist()

print("List of employees under 45 not in HR department:")
print(employees_list)

#10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}

df = pd.DataFrame(data)
#avg sales per person department wise , rank based on their avg sales

df.groupby(['Salesperson','Department'])[['Sales']].mean()

#Q8
import pandas as pd

# Create DataFrame from the given data
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)

# Filter products from the 'Fruit' category
fruit_df = df[df['Category'] == 'Fruit']

# Calculate the average price for the 'Fruit' category
average_price_fruit = fruit_df['Price'].mean()

# Identify products that are both above average price and not part of any promotion
potential_promotions = fruit_df[(fruit_df['Price'] > average_price_fruit) & (~fruit_df['Promotion'])]

print("Potential candidates for future promotions:")
print(potential_promotions)

#12

# Define the employee data
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Define the project data
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}

# Create DataFrames from the data
employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)

# Merge the employee and project data based on the 'Employee' column
merged_df = pd.merge(project_df, employee_df, on='Employee', how='left')

# Fill missing values in 'Department' and 'Manager' columns with appropriate values
merged_df['Department'] = merged_df['Department'].fillna('Unassigned')
merged_df['Manager'] = merged_df['Manager'].fillna('Unassigned')

# Group by department and manager to get an overview of each department's projects
department_overview = merged_df.groupby(['Department', 'Manager'])['Project'].apply(list).reset_index()

print("Departmental Overview:")
print(department_overview)

#13
df = pd.read_csv("/content/sample_data/Q13_sports_team_stats.csv")
print(df.to_string())

win_ratios = df['Wins']/df['GamesPlayed']



if win_ratios>6:
  print("Strong Team")
else:
  print("Weak Team")


print(win_ratios)

#14
df = pd.read_csv("/content/sample_data/Q14_customer_purchases.csv")

print(df)

df.groupby(['CustomerID','LoyaltyProgramSignUp'])['PurchaseAmount'].apply(list).reset_index()

#15
df = pd.read_csv("/content/sample_data/Q15_student_grades.csv")
print(df)
avg = np.mean(df['Grade'])

df.groupby(['StudentID','Subject'])['Grade'].apply(list).reset_index()