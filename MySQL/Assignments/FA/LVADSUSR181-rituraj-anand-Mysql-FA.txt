Name: Rituraj Anand
userID: LVADSUSR181

1)-- Task 1

SELECT p.product_category, AVG(s.sales_amount) AS avg_sales_amount
FROM Sales_Records s
JOIN Products p ON s.product_id = p.product_id
WHERE s.sales_date >= DATEdiff(CURDATE(), s.sales_date)
GROUP BY p.product_category;


2) -- Task 2

SELECT p.product_id, p.product_name, SUM(sr.sales_amount) AS total_sales_amount
FROM Sales_Records sr
INNER JOIN Products p ON sr.product_id = p.product_id
WHERE YEAR(sr.sales_date) = YEAR(CURDATE())
GROUP BY p.product_id, p.product_name
ORDER BY total_sales_amount DESC
LIMIT 3;

3) -- Task 3

SELECT 
    customer_id, 
    SUM(sales_amount) AS total_sales_amount,
    PERCENT_RANK() OVER (PARTITION BY customer_id ORDER BY SUM(sales_amount)) AS sales_percent_rank,
    RANK() OVER (PARTITION BY customer_id ORDER BY SUM(sales_amount)) AS sales_rank
FROM 
    sales_records
GROUP BY 
    customer_id;
    

    
4) -- Task 4
WITH MonthlyPurchaseCounts AS (
    SELECT
        customer_id,
        EXTRACT(YEAR FROM sales_date) AS sales_year,
        EXTRACT(MONTH FROM sales_date) AS sales_month,
        COUNT(DISTINCT EXTRACT(YEAR FROM sales_date) * 100 + EXTRACT(MONTH FROM sales_date)) AS monthly_purchase_count
    FROM
        Sales_Records
    GROUP BY
        customer_id,
        EXTRACT(YEAR FROM sales_date),
        EXTRACT(MONTH FROM sales_date)
),
CustomerPurchaseBehavior AS (
    SELECT
        customer_id,
        SUM(CASE WHEN monthly_purchase_count >= 4 THEN 1 ELSE 0 END) AS consistent_months,
        COUNT(*) AS total_months
    FROM
        MonthlyPurchaseCounts
    GROUP BY
        customer_id
)
SELECT
    c.customer_id,
    c.customer_name,
    CASE
        WHEN cpb.consistent_months >= 4 THEN 'Consistent Buyer'
        ELSE 'Occasional Buyer'
    END AS buyer_category
FROM
    Customers c
LEFT JOIN
    CustomerPurchaseBehavior cpb ON c.customer_id = cpb.customer_id;



5) -- Task 5
create view flights_view as
select f.*,p.*,t.ticket_id, t.ticket_price, t.ticket_date 
from flights f
join tickets t using(flight_id)
join passengers p using(passenger_id)  ;

select * from flights_view;


select flight_number,avg(base_price) as avg_price, 
concat(departure_airport,',',arrival_airport) as routes
from flights_view
group by flight_number,routes;



6) -- Task 6
SELECT
    flight_number,
    departure_date,
    COUNT(ticket_id) AS total_tickets_sold
FROM
    flights_view
WHERE
    ticket_date >= DATE_SUB(ticket_date, Interval 1 Month) -- Select tickets sold in the past month
GROUP BY
    flight_number,
    departure_date
ORDER BY
    total_tickets_sold DESC;

7) -- Task 7

SELECT
    passenger_name,
    SUM(ticket_price) AS total_amount_spent,
    frequent_flyer_status
FROM
   flights_view
GROUP BY
    passenger_name,
    frequent_flyer_status
ORDER BY
    total_amount_spent DESC
LIMIT 5;



8) -- Task 8
SELECT
    DATE_FORMAT(T.ticket_date, '%Y-%m') AS travel_month,
    COUNT(T.ticket_id) AS total_tickets_sold
FROM
    Tickets T
GROUP BY
    travel_month
ORDER BY
    total_tickets_sold DESC
LIMIT 1;

9)-- Task 9
create view players_view as
select ps.*, g.game_name, g.game_genre, 
g.release_date , p.player_name,  p.player_email,  p.registration_date
from playerscores ps 
join games g using(game_id)
join players p using(player_id);

select  player_id,game_genre,avg(datediff(play_date,registration_date)*24*60) as avg_time 
from players_view GROUP BY game_genre,player_id
ORDER BY avg_time DESC;

10)-- 10
SELECT
    game_name,
    COUNT(DISTINCT player_id) AS total_players
FROM
    players_view
GROUP BY
    game_name
ORDER BY
    total_players DESC
LIMIT 3;


11)
--  Task 11
select game_name,avg(score), max(score), count(distinct player_id)
from players_view
group by game_name;

12)
-- task 12
SELECT
    player_id,
    player_name,
    registration_date,
    MAX(play_date) AS last_activity_date
FROM
    players_view
WHERE
    play_date < DATE_SUB(CURDATE(), INTERVAL 30 DAY) OR play_date IS NULL
GROUP BY
    player_id, player_name, registration_date
HAVING
    last_activity_date < DATE_SUB(CURDATE(), INTERVAL 30 DAY) OR last_activity_date IS NULL;


13)
-- task 13
CREATE VIEW PatientTreatmentView AS
SELECT
    p.patient_id,
    p.patient_name,
    p.age,
    p.gender,
    p.admission_date,
    p.discharge_date,
    p.diagnosis,
    p.bill_amount,
    d.doctor_id,
    d.doctor_name,
    d.specialization,
    d.years_of_experience,
    t.treatment_id,
    t.treatment_name,
    t.treatment_date,
    t.cost
FROM
    Patients p
JOIN
    Treatments t ON p.patient_id = t.patient_id
JOIN
    Doctors d ON t.doctor_id = d.doctor_id;
    
SELECT
    doctor_id,
    doctor_name,
    SUM(cost) AS total_cost_of_treatments
FROM
    patienttreatmentview
GROUP BY
    doctor_id, doctor_name
ORDER BY
    total_cost_of_treatments DESC
LIMIT 5;

14)-- Task 14
WITH TotalRevenue AS (
    SELECT 
        SUM(cost) AS total_total_revenue 
    FROM 
        Treatments
)
SELECT
    treatment_name,
    SUM(cost) AS total_revenue,
    (SUM(cost) / (SELECT total_total_revenue FROM TotalRevenue)) AS revenue_contribution_percentage,
    PERCENT_RANK() OVER (ORDER BY SUM(cost) DESC) AS revenue_rank
FROM
    Treatments
GROUP BY
    treatment_name
ORDER BY
    total_revenue DESC;


15)-- Task 15
SELECT
    patient_id,
    patient_name,
    admission_date AS readmission_date,
    discharge_date AS readmission_discharge_date
FROM
    patienttreatmentview
WHERE
    admission_date > DATE_ADD(discharge_date, INTERVAL 30 DAY)
ORDER BY
    admission_date ASC;


16)
-- Task 16

SELECT
    gender,
    diagnosis,
    ROUND(AVG(DATEDIFF(discharge_date, admission_date)), 0) AS avg_length_of_stay
FROM
    patienttreatmentview
GROUP BY
    gender,
    diagnosis;


17)
-- Task 17
CREATE VIEW Student_Enrollments_Courses AS
SELECT
    E.enrollment_id,
    S.student_id,
    S.student_name,
    S.major,
    S.enrollment_year,
    C.course_id,
    C.course_name,
    C.credits,
    C.department,
    E.grade,
    E.semester
FROM
    Enrollments E
JOIN
    Students S ON E.student_id = S.student_id
JOIN
    Courses C ON E.course_id = C.course_id;
    
SELECT
    department,
    semester,
    AVG(grade) AS avg_grade
FROM
    Student_Enrollments_Courses
GROUP BY
    department,
    semester
ORDER BY
    department,
    semester;


18)-- Task 18
SELECT
    major,
    enrollment_year,
    COUNT(student_id) AS total_students_enrolled
FROM
    Student_Enrollments_Courses
GROUP BY
    major,
    enrollment_year
ORDER BY
    total_students_enrolled DESC
LIMIT 5;


19)-- Task 19
SELECT
    *
FROM (
    SELECT
        student_id,
        student_name,
        semester,
        SUM(credits) OVER (PARTITION BY semester order by student_id) AS total_credits
    FROM
        Student_Enrollments_Courses
) AS subquery
WHERE
    total_credits >= 50;

20)
-- Task 20

WITH CourseEnrollmentRank AS (
    SELECT
        course_name,
        enrollment_year,
        COUNT(*) AS enrollment_count,
        ROW_NUMBER() OVER (PARTITION BY enrollment_year ORDER BY COUNT(*) DESC) AS rnk
    FROM
        Student_Enrollments_Courses
    GROUP BY
        course_name,
        enrollment_year
)
SELECT
    course_name,
    enrollment_year,
    enrollment_count
FROM
    CourseEnrollmentRank
WHERE
    rnk <= 3
ORDER BY
    enrollment_year,
    enrollment_count DESC;

